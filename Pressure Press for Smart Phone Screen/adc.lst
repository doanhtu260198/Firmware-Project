C51 COMPILER V9.52.0.0   ADC                                                               07/15/2021 17:28:53 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN adc.obj
COMPILER INVOKED BY: E:\DTVT program\KEIL C 5 8051\C51\BIN\C51.EXE scr\adc.c BROWSE INCDIR(.\inc) DEBUG OBJECTEXTEND PRI
                    -NT(.\adc.lst) TABS(2) OBJECT(adc.obj)

line level    source

   1          #include "SC92F732x_C.H"
   2          #include "adc.h"
   3          #include <Math.H>
   4          //----------------------------------------------------------------------------------------------
   5          //********************************************EXTERN********************************************
   6          
   7          //----------------------------------------------------------------------------------------------
   8          //********************************************DEFINE********************************************
   9          #define N 4094 
  10          #define R1 10000 
  11          #define R25 10000 
  12          #define T25  298 
  13          //----------------------------------------------------------------------------------------------
  14          //******************************************PROTOTYPE*******************************************
  15          
  16          //----------------------------------------------------------------------------------------------
  17          //*******************************************VARIABLE*******************************************
  18          //var for notify of completing ADC conversion
  19          bit AdcFlag = 0;  
  20          unsigned int ADCValue;
  21          //int Channel;
  22          //----------------------------------------------------------------------------------------------
  23          //*******************************************STRUCT*********************************************
  24          //enum Channel {AIN0=0,AIN1,AIN2,AIN3,AIN4,AIN5,AIN6,AIN7,AIN8,AIN9,VDD4=15};
  25          /*
  26          #if (IC_MODEL == SC92F7323)
  27            enum Channel {AIN0=0,AIN1,AIN2,AIN3,AIN4,AIN5,AIN6,AIN7,AIN8,AIN9,VDD4=15};
  28          #endif
  29          
  30          #if (IC_MODEL == SC92F7322)
  31            enum Channel {AIN0=0,AIN1,AIN4=4,AIN5,AIN6,AIN7,AIN8,AIN9,VDD4=15};
  32          #endif
  33            
  34          #if (IC_MODEL == SC92F7321)
  35            enum Channel {AIN0=0,AIN1,AIN2,AIN3,AIN8=8,AIN9,VDD4=15};
  36          #endif
  37            
  38          #if (IC_MODEL == SC92F7320)
  39            enum Channel {AIN0=0,AIN1,AIN6=6,AIN7,VDD4=15};
  40          #endif
  41          */
  42          //----------------------------------------------------------------------------------------------
  43          //******************************************FUNCTION********************************************
  44          //----------------------------------------------------------------------------------------------
  45          //ADC congfiguration
  46          void ADC_configuration(char Channel){
  47   1        //--------------------------------------------------------------------------------------------
  48   1        //Select and enable ADC channel
  49   1        ADCCON = 0X80|Channel;                    //Select ADC channel
  50   1        if(Channel<8)
  51   1        {
  52   2          ADCCFG0 = 1<<Channel;                   //enable ADC channel 1-7
  53   2        }
  54   1        else
C51 COMPILER V9.52.0.0   ADC                                                               07/15/2021 17:28:53 PAGE 2   

  55   1        {
  56   2          ADCCFG1 = 1<<(Channel-8);               //enable ADC channel 8-9
  57   2        }
  58   1        //--------------------------------------------------------------------------------------------
  59   1        //allow ADC interrupt
  60   1        IE |= 0X40;                               //enable ADC interrupt
  61   1        EA = 1;
  62   1      }
  63          
  64          //----------------------------------------------------------------------------------------------
  65          //read ADC value
  66          float ADC_read(){
  67   1          float Term,Rntc;
  68   1          ADCCON |= 0X40;                         //start to read ADC value
  69   1          while(!AdcFlag);                        //wait until ADC conversion completed
  70   1          AdcFlag = 0;
  71   1          ADCValue = (ADCVH<<4)+(ADCVL>>4);
  72   1          
  73   1          //Rntc=(2.345/10)*10000;
  74   1            Rntc=(N-ADCValue);
  75   1            Rntc=Rntc*R1/ADCValue;
  76   1          //Rntc=R1;
  77   1          //ADCValue = (unsigned int)Rntc;
  78   1          //ADCValue = 1000;
  79   1            Term= 100*(log10(R25)-log10(Rntc));
  80   1            Term = Term* (2.3026/39) ;
  81   1          Term = (10000/((float)(298)))-Term;
  82   1          Term= ((10000/Term) - 273) ;  
  83   1          return Term;
  84   1      }
  85          //----------------------------------------------------------------------------------------------
  86          //caculateNTC
  87          
  88          //void caculateNTC(unsigned int Dout,float Rntc,float Term){
  89            
  90            // Vdd= Vrf --
  91            // Vout=(Vrf*dout)*2^N tinh dien ap ra; Rntc= R1(Vdd/Vout-) R noi tiep , rut gon 
  92            //  Rntc=R1*(N/Dout-1);
  93            // Rntc=R25*e^(B*(1/T-1/T25) lay log duoc
  94            // T=1/(1/T25 - (1/Bloge)* (logR25/Log RTC) 
  95            //Term= 100*(log10(R25)-log10(Rntc));
  96            //Term = Term* (2.3026/37) ;
  97            //Term = (10000/((float)(298)))-Term;
  98            //Term= ((10000/Term) - 273) ;    
  99            //return Term;
 100          //}
 101          
 102          //----------------------------------------------------------------------------------------------
 103          //ADC interrupt service
 104          void ADC_Interrupt(void) interrupt 6
 105          {
 106   1        ADCCON &= ~(0X10);  //清中断标志位
 107   1        AdcFlag = 1;
 108   1      }
 109          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    310    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.52.0.0   ADC                                                               07/15/2021 17:28:53 PAGE 3   

   DATA SIZE        =      2       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
